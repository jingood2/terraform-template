### Reusable workflow to download terraform artifact built by `az_tf_plan` and apply the artifact/plan ###
name: 'Apply_TF_Plan'
on:
  workflow_call:
    inputs:
      path:
        description: 'Specifies the path of the root terraform module.'
        required: true
        type: string
      tf_version:
        description: 'Specifies version of Terraform to use. e.g: 1.1.0 Default=latest.'
        required: false
        type: string
        default: latest
      gh_environment:
        description: 'Specifies the GitHub deployment environment.'
        required: true
        type: string
      enable_workspace:
        description: 'Enable Terraform workspace.'
        required: false
        type: string
        default: false
    secrets:
      DEV_DEPLOY_ROLE:
        description: 'Specifies the DEV_DEPLOY_ROLE'
        required: true

jobs:
  terraform-plan:
    name: terraform-plan
    runs-on: ubuntu-latest
    env:
      TF_VAR_allowed_account_id: ${{ secrets.ALLOWED_ACCOUNT_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      EXPAND_SUMMARY_DETAILS: true
      TF_IN_AUTOMATION: true
      TF_WORKSPACE: ${{ inputs.gh_environment }}

    permissions: write-all

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: true
        terraform_version: 1.3.0
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-region: us-east-1
        role-to-assume: ${{secrets.DEV_DEPLOY_ROLE}}
        #aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Init - ${{ inputs.gh_environment }}
      id: init
      #run: terraform init -input=false -backend-config="key=${{matrix.path}}"
      working-directory: ./terraform
      run: |
        SAVED_TF_WORKSPACE=$TF_WORKSPACE
        unset TF_WORKSPACE
        terraform init -input=false -backend-config="key=${{inputs.gh_environment}}" -backend-config="../environments/${{inputs.gh_environment}}.conf"
        TF_WORKSPACE=$SAVED_TF_WORKSPACE
        terraform workspace select "${TF_WORKSPACE}" || terraform workspace new "${TF_WORKSPACE}"


    - name: Post Init - ${{ inputs.gh_environment }}
      if: always() && github.ref != 'refs/heads/main' && (steps.init.outcome == 'success' || steps.init.outcome == 'failure')
      uses: robburger/terraform-pr-commenter@v1
      with:
        commenter_type: init
        commenter_input: ${{ format('{0}{1}', steps.init.outputs.stdout, steps.init.outputs.stderr) }}
        commenter_exitcode: ${{ steps.init.outputs.exitcode }}


    - name: Terraform Plan - ${{ inputs.gh_environment }}
      working-directory: ./terraform
      id: plan
      run: terraform plan --var-file=../environments/${{inputs.gh_environment}}.auto.tfvars --out=plan.tfplan
      continue-on-error: true

    - name: Post Plan - ${{ inputs.gh_environment }}
      uses: robburger/terraform-pr-commenter@v1
      env:
        EXPAND_SUMMARY_DETAILS: true # Override global environment variable; expand details just for this step
      with:
        commenter_type: plan
        commenter_input: ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
        commenter_exitcode: ${{ steps.plan.outputs.exitcode }}

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Compress TF Plan artifact
      working-directory: ./terraform
      run: |
        zip -r tfplan.zip ./*

    - name: Upload Artifact
      working-directory: ./terraform
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.gh_environment }}
        path: 'tfplan.zip'
        retention-days: 5
    

  #devLabelWhenApproved:
  #  needs: [terraform-plan]
    - name: Label dev when approved
      uses: pullreminders/label-when-approved-action@master
      env:
        APPROVALS: "0"
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ADD_LABEL: "dev approved"

  terraform-apply:
    needs: [terraform-plan]
    runs-on: ubuntu-latest
    environment: ${{ inputs.gh_environment }}
    defaults:
      run:
        shell: bash
    env:
      TF_KEY: ${{ inputs.gh_environment }}
      TF_WORKSPACE: ${{ inputs.gh_environment }}
    
    steps:
      - name: Download Artifact
        working-directory: ./terraform
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.TF_KEY }}
          #path: ${{ inputs.path }}

      - name: Decompress TF Plan artifact
        run: unzip tfplan.zip

      #- name: New Workspace
      #  id: new_workspace
      #  run: terraform workspace new ${{inputs.gh_environment}}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-east-1
          role-to-assume: ${{secrets.DEV_DEPLOY_ROLE}}
          #aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          #aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.tf_version }}
      
      #- name: Label dev when approved
      #  uses: pullreminders/label-when-approved-action@master
      #  env:
      #    APPROVALS: "0"
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ADD_LABEL: "${{inputs.gh_environment}} approved"

      - name: Terraform Apply
        if: contains(github.event.pull_request.labels.*.name, "${{inputs.gh_environment}} approved")
        run: |
          terraform apply plan.tfplan
